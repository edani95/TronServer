// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Tick.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tron.Protocol.Messages {

  /// <summary>Holder for reflection information generated from Tick.proto</summary>
  public static partial class TickReflection {

    #region Descriptor
    /// <summary>File descriptor for Tick.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TickReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpUaWNrLnByb3RvEhZ0cm9uLnByb3RvY29sLm1lc3NhZ2VzGgxDb21tb24u",
            "cHJvdG8iWwoEVGljaxIRCgljb3VudGRvd24YASABKAUSEQoJbGFzdF90aWNr",
            "GAIgASgIEi0KB2NoYW5nZXMYAyADKAsyHC50cm9uLnByb3RvY29sLmNvbW1v",
            "bi5DaGFuZ2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tron.Protocol.Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Protocol.Messages.Tick), global::Tron.Protocol.Messages.Tick.Parser, new[]{ "Countdown", "LastTick", "Changes" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Tick : pb::IMessage<Tick> {
    private static readonly pb::MessageParser<Tick> _parser = new pb::MessageParser<Tick>(() => new Tick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Protocol.Messages.TickReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick(Tick other) : this() {
      countdown_ = other.countdown_;
      lastTick_ = other.lastTick_;
      changes_ = other.changes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick Clone() {
      return new Tick(this);
    }

    /// <summary>Field number for the "countdown" field.</summary>
    public const int CountdownFieldNumber = 1;
    private int countdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Countdown {
      get { return countdown_; }
      set {
        countdown_ = value;
      }
    }

    /// <summary>Field number for the "last_tick" field.</summary>
    public const int LastTickFieldNumber = 2;
    private bool lastTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LastTick {
      get { return lastTick_; }
      set {
        lastTick_ = value;
      }
    }

    /// <summary>Field number for the "changes" field.</summary>
    public const int ChangesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tron.Protocol.Common.Change> _repeated_changes_codec
        = pb::FieldCodec.ForMessage(26, global::Tron.Protocol.Common.Change.Parser);
    private readonly pbc::RepeatedField<global::Tron.Protocol.Common.Change> changes_ = new pbc::RepeatedField<global::Tron.Protocol.Common.Change>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Protocol.Common.Change> Changes {
      get { return changes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Countdown != other.Countdown) return false;
      if (LastTick != other.LastTick) return false;
      if(!changes_.Equals(other.changes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Countdown != 0) hash ^= Countdown.GetHashCode();
      if (LastTick != false) hash ^= LastTick.GetHashCode();
      hash ^= changes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Countdown != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Countdown);
      }
      if (LastTick != false) {
        output.WriteRawTag(16);
        output.WriteBool(LastTick);
      }
      changes_.WriteTo(output, _repeated_changes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Countdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Countdown);
      }
      if (LastTick != false) {
        size += 1 + 1;
      }
      size += changes_.CalculateSize(_repeated_changes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tick other) {
      if (other == null) {
        return;
      }
      if (other.Countdown != 0) {
        Countdown = other.Countdown;
      }
      if (other.LastTick != false) {
        LastTick = other.LastTick;
      }
      changes_.Add(other.changes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Countdown = input.ReadInt32();
            break;
          }
          case 16: {
            LastTick = input.ReadBool();
            break;
          }
          case 26: {
            changes_.AddEntriesFrom(input, _repeated_changes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
