// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tron.Protocol.Common {

  /// <summary>Holder for reflection information generated from Common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for Common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDb21tb24ucHJvdG8SFHRyb24ucHJvdG9jb2wuY29tbW9uIhQKBUNvbG9y",
            "EgsKA3JnYhgBIAEoCSJRCgZQbGF5ZXISDAoEbmFtZRgBIAEoCRIqCgVjb2xv",
            "chgCIAEoCzIbLnRyb24ucHJvdG9jb2wuY29tbW9uLkNvbG9yEg0KBXJlYWR5",
            "GAMgASgIIn8KCFBvc2l0aW9uEhMKC3Bvc2l0aW9uX2lkGAEgASgFEhQKDGNv",
            "b3JkaW5hdGVfeBgCIAEoBRIUCgxjb29yZGluYXRlX3kYAyABKAUSMgoJZGly",
            "ZWN0aW9uGAQgASgOMh8udHJvbi5wcm90b2NvbC5jb21tb24uRGlyZWN0aW9u",
            "IoMBCgdTZXR0aW5nEg0KBXdpZHRoGAEgASgFEg4KBmhlaWdodBgCIAEoBRIN",
            "CgVzcGVlZBgDIAEoBRIRCgljb3VudGRvd24YBCABKAUSNwoPc3RhcnRfcG9z",
            "aXRpb25zGAUgAygLMh4udHJvbi5wcm90b2NvbC5jb21tb24uUG9zaXRpb24i",
            "UQoOUGxheWVyUG9zaXRpb24SKgoFY29sb3IYASABKAsyGy50cm9uLnByb3Rv",
            "Y29sLmNvbW1vbi5Db2xvchITCgtwb3NpdGlvbl9pZBgCIAEoBSJ2CgZDaGFu",
            "Z2USKgoFY29sb3IYASABKAsyGy50cm9uLnByb3RvY29sLmNvbW1vbi5Db2xv",
            "chIyCglkaXJlY3Rpb24YAiABKA4yHy50cm9uLnByb3RvY29sLmNvbW1vbi5E",
            "aXJlY3Rpb24SDAoEZGVhZBgDIAEoCCoyCgdQcml2YWN5EhIKDlBSSVZBQ1lf",
            "UFVCTElDEAASEwoPUFJJVkFDWV9QUklWQVRFEAEqWgoJRGlyZWN0aW9uEhAK",
            "DERJUkVDVElPTl9VUBAAEhIKDkRJUkVDVElPTl9ET1dOEAESEgoORElSRUNU",
            "SU9OX0xFRlQQAhITCg9ESVJFQ1RJT05fUklHSFQQAypFCgxDb25uZWN0U3Rh",
            "dGUSGAoUQ09OTkVDVFNUQVRFX0NPTk5FQ1QQABIbChdDT05ORUNUU1RBVEVf",
            "RElTQ09OTkVDVBABKkQKCUVycm9yQ29kZRIUChBFUlJPUkNPREVTX09USEVS",
            "EAASIQodRVJST1JDT0RFU19OT1RfRVhJU1RJTkdfTE9CQlkQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tron.Protocol.Common.Privacy), typeof(global::Tron.Protocol.Common.Direction), typeof(global::Tron.Protocol.Common.ConnectState), typeof(global::Tron.Protocol.Common.ErrorCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Protocol.Common.Color), global::Tron.Protocol.Common.Color.Parser, new[]{ "Rgb" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Protocol.Common.Player), global::Tron.Protocol.Common.Player.Parser, new[]{ "Name", "Color", "Ready" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Protocol.Common.Position), global::Tron.Protocol.Common.Position.Parser, new[]{ "PositionId", "CoordinateX", "CoordinateY", "Direction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Protocol.Common.Setting), global::Tron.Protocol.Common.Setting.Parser, new[]{ "Width", "Height", "Speed", "Countdown", "StartPositions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Protocol.Common.PlayerPosition), global::Tron.Protocol.Common.PlayerPosition.Parser, new[]{ "Color", "PositionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Protocol.Common.Change), global::Tron.Protocol.Common.Change.Parser, new[]{ "Color", "Direction", "Dead" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Privacy {
    [pbr::OriginalName("PRIVACY_PUBLIC")] Public = 0,
    [pbr::OriginalName("PRIVACY_PRIVATE")] Private = 1,
  }

  public enum Direction {
    [pbr::OriginalName("DIRECTION_UP")] Up = 0,
    [pbr::OriginalName("DIRECTION_DOWN")] Down = 1,
    [pbr::OriginalName("DIRECTION_LEFT")] Left = 2,
    [pbr::OriginalName("DIRECTION_RIGHT")] Right = 3,
  }

  public enum ConnectState {
    [pbr::OriginalName("CONNECTSTATE_CONNECT")] Connect = 0,
    [pbr::OriginalName("CONNECTSTATE_DISCONNECT")] Disconnect = 1,
  }

  public enum ErrorCode {
    [pbr::OriginalName("ERRORCODES_OTHER")] SOther = 0,
    /// <summary>
    ///TODO: extend list of most common errors
    /// </summary>
    [pbr::OriginalName("ERRORCODES_NOT_EXISTING_LOBBY")] SNotExistingLobby = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Protocol.Common.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      rgb_ = other.rgb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "rgb" field.</summary>
    public const int RgbFieldNumber = 1;
    private string rgb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rgb {
      get { return rgb_; }
      set {
        rgb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rgb != other.Rgb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rgb.Length != 0) hash ^= Rgb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rgb.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Rgb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rgb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rgb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.Rgb.Length != 0) {
        Rgb = other.Rgb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Rgb = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Protocol.Common.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      name_ = other.name_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      ready_ = other.ready_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::Tron.Protocol.Common.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Common.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 3;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Ready != other.Ready) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Ready != false) hash ^= Ready.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (Ready != false) {
        output.WriteRawTag(24);
        output.WriteBool(Ready);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Tron.Protocol.Common.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (color_ == null) {
              Color = new global::Tron.Protocol.Common.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 24: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Protocol.Common.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      positionId_ = other.positionId_;
      coordinateX_ = other.coordinateX_;
      coordinateY_ = other.coordinateY_;
      direction_ = other.direction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "position_id" field.</summary>
    public const int PositionIdFieldNumber = 1;
    private int positionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PositionId {
      get { return positionId_; }
      set {
        positionId_ = value;
      }
    }

    /// <summary>Field number for the "coordinate_x" field.</summary>
    public const int CoordinateXFieldNumber = 2;
    private int coordinateX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoordinateX {
      get { return coordinateX_; }
      set {
        coordinateX_ = value;
      }
    }

    /// <summary>Field number for the "coordinate_y" field.</summary>
    public const int CoordinateYFieldNumber = 3;
    private int coordinateY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoordinateY {
      get { return coordinateY_; }
      set {
        coordinateY_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private global::Tron.Protocol.Common.Direction direction_ = global::Tron.Protocol.Common.Direction.Up;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Common.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PositionId != other.PositionId) return false;
      if (CoordinateX != other.CoordinateX) return false;
      if (CoordinateY != other.CoordinateY) return false;
      if (Direction != other.Direction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PositionId != 0) hash ^= PositionId.GetHashCode();
      if (CoordinateX != 0) hash ^= CoordinateX.GetHashCode();
      if (CoordinateY != 0) hash ^= CoordinateY.GetHashCode();
      if (Direction != global::Tron.Protocol.Common.Direction.Up) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PositionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PositionId);
      }
      if (CoordinateX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CoordinateX);
      }
      if (CoordinateY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CoordinateY);
      }
      if (Direction != global::Tron.Protocol.Common.Direction.Up) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PositionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionId);
      }
      if (CoordinateX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoordinateX);
      }
      if (CoordinateY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoordinateY);
      }
      if (Direction != global::Tron.Protocol.Common.Direction.Up) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.PositionId != 0) {
        PositionId = other.PositionId;
      }
      if (other.CoordinateX != 0) {
        CoordinateX = other.CoordinateX;
      }
      if (other.CoordinateY != 0) {
        CoordinateY = other.CoordinateY;
      }
      if (other.Direction != global::Tron.Protocol.Common.Direction.Up) {
        Direction = other.Direction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PositionId = input.ReadInt32();
            break;
          }
          case 16: {
            CoordinateX = input.ReadInt32();
            break;
          }
          case 24: {
            CoordinateY = input.ReadInt32();
            break;
          }
          case 32: {
            Direction = (global::Tron.Protocol.Common.Direction) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Setting : pb::IMessage<Setting> {
    private static readonly pb::MessageParser<Setting> _parser = new pb::MessageParser<Setting>(() => new Setting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Setting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Protocol.Common.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Setting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Setting(Setting other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      speed_ = other.speed_;
      countdown_ = other.countdown_;
      startPositions_ = other.startPositions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Setting Clone() {
      return new Setting(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "countdown" field.</summary>
    public const int CountdownFieldNumber = 4;
    private int countdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Countdown {
      get { return countdown_; }
      set {
        countdown_ = value;
      }
    }

    /// <summary>Field number for the "start_positions" field.</summary>
    public const int StartPositionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Tron.Protocol.Common.Position> _repeated_startPositions_codec
        = pb::FieldCodec.ForMessage(42, global::Tron.Protocol.Common.Position.Parser);
    private readonly pbc::RepeatedField<global::Tron.Protocol.Common.Position> startPositions_ = new pbc::RepeatedField<global::Tron.Protocol.Common.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tron.Protocol.Common.Position> StartPositions {
      get { return startPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Setting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Setting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Speed != other.Speed) return false;
      if (Countdown != other.Countdown) return false;
      if(!startPositions_.Equals(other.startPositions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Countdown != 0) hash ^= Countdown.GetHashCode();
      hash ^= startPositions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (Countdown != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Countdown);
      }
      startPositions_.WriteTo(output, _repeated_startPositions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Countdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Countdown);
      }
      size += startPositions_.CalculateSize(_repeated_startPositions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Setting other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Countdown != 0) {
        Countdown = other.Countdown;
      }
      startPositions_.Add(other.startPositions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            Countdown = input.ReadInt32();
            break;
          }
          case 42: {
            startPositions_.AddEntriesFrom(input, _repeated_startPositions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPosition : pb::IMessage<PlayerPosition> {
    private static readonly pb::MessageParser<PlayerPosition> _parser = new pb::MessageParser<PlayerPosition>(() => new PlayerPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Protocol.Common.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPosition(PlayerPosition other) : this() {
      color_ = other.color_ != null ? other.color_.Clone() : null;
      positionId_ = other.positionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPosition Clone() {
      return new PlayerPosition(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Tron.Protocol.Common.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Common.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "position_id" field.</summary>
    public const int PositionIdFieldNumber = 2;
    private int positionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PositionId {
      get { return positionId_; }
      set {
        positionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Color, other.Color)) return false;
      if (PositionId != other.PositionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (color_ != null) hash ^= Color.GetHashCode();
      if (PositionId != 0) hash ^= PositionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (PositionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PositionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (PositionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPosition other) {
      if (other == null) {
        return;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Tron.Protocol.Common.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.PositionId != 0) {
        PositionId = other.PositionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (color_ == null) {
              Color = new global::Tron.Protocol.Common.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 16: {
            PositionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Change : pb::IMessage<Change> {
    private static readonly pb::MessageParser<Change> _parser = new pb::MessageParser<Change>(() => new Change());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Protocol.Common.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change(Change other) : this() {
      color_ = other.color_ != null ? other.color_.Clone() : null;
      direction_ = other.direction_;
      dead_ = other.dead_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change Clone() {
      return new Change(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Tron.Protocol.Common.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Common.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::Tron.Protocol.Common.Direction direction_ = global::Tron.Protocol.Common.Direction.Up;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Common.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "dead" field.</summary>
    public const int DeadFieldNumber = 3;
    private bool dead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dead {
      get { return dead_; }
      set {
        dead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Color, other.Color)) return false;
      if (Direction != other.Direction) return false;
      if (Dead != other.Dead) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Direction != global::Tron.Protocol.Common.Direction.Up) hash ^= Direction.GetHashCode();
      if (Dead != false) hash ^= Dead.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (Direction != global::Tron.Protocol.Common.Direction.Up) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Direction);
      }
      if (Dead != false) {
        output.WriteRawTag(24);
        output.WriteBool(Dead);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Direction != global::Tron.Protocol.Common.Direction.Up) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (Dead != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Change other) {
      if (other == null) {
        return;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Tron.Protocol.Common.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Direction != global::Tron.Protocol.Common.Direction.Up) {
        Direction = other.Direction;
      }
      if (other.Dead != false) {
        Dead = other.Dead;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (color_ == null) {
              Color = new global::Tron.Protocol.Common.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 16: {
            Direction = (global::Tron.Protocol.Common.Direction) input.ReadEnum();
            break;
          }
          case 24: {
            Dead = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
