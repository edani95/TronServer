// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ServerWrapper.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tron.Protocol.Wrappers.Server {

  /// <summary>Holder for reflection information generated from ServerWrapper.proto</summary>
  public static partial class ServerWrapperReflection {

    #region Descriptor
    /// <summary>File descriptor for ServerWrapper.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerWrapperReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNTZXJ2ZXJXcmFwcGVyLnByb3RvEh10cm9uLnByb3RvY29sLndyYXBwZXJz",
            "LnNlcnZlchoKQ2hhdC5wcm90bxoPQ29uZmlndXJlLnByb3RvGgtFdmVudC5w",
            "cm90bxoLUmVhZHkucHJvdG8i5QIKEUNoYXRTZXJ2ZXJXcmFwcGVyEk0KDG1l",
            "c3NhZ2VfdHlwZRgBIAEoDjI3LnRyb24ucHJvdG9jb2wud3JhcHBlcnMuc2Vy",
            "dmVyLlNlcnZlcldyYXBwZXJNZXNzYWdlVHlwZRI0CgxjaGF0X21lc3NhZ2UY",
            "AiABKAsyHC50cm9uLnByb3RvY29sLm1lc3NhZ2VzLkNoYXRIABI2Cg1yZWFk",
            "eV9tZXNzYWdlGAMgASgLMh0udHJvbi5wcm90b2NvbC5tZXNzYWdlcy5SZWFk",
            "eUgAEj4KEWNvbmZpZ3VyZV9tZXNzYWdlGAQgASgLMiEudHJvbi5wcm90b2Nv",
            "bC5tZXNzYWdlcy5Db25maWd1cmVIABJDChRwbGF5ZXJfZXZlbnRfbWVzc2Fn",
            "ZRgFIAEoCzIjLnRyb24ucHJvdG9jb2wubWVzc2FnZXMuUGxheWVyRXZlbnRI",
            "AEIOCgxyZWFsX21lc3NhZ2UqnAEKGFNlcnZlcldyYXBwZXJNZXNzYWdlVHlw",
            "ZRIbChdXUkFQUEVSTUVTU0FHRVRZUEVfQ0hBVBAAEhwKGFdSQVBQRVJNRVNT",
            "QUdFVFlQRV9SRUFEWRABEiAKHFdSQVBQRVJNRVNTQUdFVFlQRV9DT05GSUdV",
            "UkUQAhIjCh9XUkFQUEVSTUVTU0FHRVRZUEVfUExBWUVSX0VWRU5UEANiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tron.Protocol.Messages.ChatReflection.Descriptor, global::Tron.Protocol.Messages.ConfigureReflection.Descriptor, global::Tron.Protocol.Messages.EventReflection.Descriptor, global::Tron.Protocol.Messages.ReadyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tron.Protocol.Wrappers.Server.ChatServerWrapper), global::Tron.Protocol.Wrappers.Server.ChatServerWrapper.Parser, new[]{ "MessageType", "ChatMessage", "ReadyMessage", "ConfigureMessage", "PlayerEventMessage" }, new[]{ "RealMessage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ServerWrapperMessageType {
    [pbr::OriginalName("WRAPPERMESSAGETYPE_CHAT")] WrappermessagetypeChat = 0,
    [pbr::OriginalName("WRAPPERMESSAGETYPE_READY")] WrappermessagetypeReady = 1,
    [pbr::OriginalName("WRAPPERMESSAGETYPE_CONFIGURE")] WrappermessagetypeConfigure = 2,
    [pbr::OriginalName("WRAPPERMESSAGETYPE_PLAYER_EVENT")] WrappermessagetypePlayerEvent = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ChatServerWrapper : pb::IMessage<ChatServerWrapper> {
    private static readonly pb::MessageParser<ChatServerWrapper> _parser = new pb::MessageParser<ChatServerWrapper>(() => new ChatServerWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatServerWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tron.Protocol.Wrappers.Server.ServerWrapperReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatServerWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatServerWrapper(ChatServerWrapper other) : this() {
      messageType_ = other.messageType_;
      switch (other.RealMessageCase) {
        case RealMessageOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage.Clone();
          break;
        case RealMessageOneofCase.ReadyMessage:
          ReadyMessage = other.ReadyMessage.Clone();
          break;
        case RealMessageOneofCase.ConfigureMessage:
          ConfigureMessage = other.ConfigureMessage.Clone();
          break;
        case RealMessageOneofCase.PlayerEventMessage:
          PlayerEventMessage = other.PlayerEventMessage.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatServerWrapper Clone() {
      return new ChatServerWrapper(this);
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType messageType_ = global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType.WrappermessagetypeChat;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "chat_message" field.</summary>
    public const int ChatMessageFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Messages.Chat ChatMessage {
      get { return realMessageCase_ == RealMessageOneofCase.ChatMessage ? (global::Tron.Protocol.Messages.Chat) realMessage_ : null; }
      set {
        realMessage_ = value;
        realMessageCase_ = value == null ? RealMessageOneofCase.None : RealMessageOneofCase.ChatMessage;
      }
    }

    /// <summary>Field number for the "ready_message" field.</summary>
    public const int ReadyMessageFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Messages.Ready ReadyMessage {
      get { return realMessageCase_ == RealMessageOneofCase.ReadyMessage ? (global::Tron.Protocol.Messages.Ready) realMessage_ : null; }
      set {
        realMessage_ = value;
        realMessageCase_ = value == null ? RealMessageOneofCase.None : RealMessageOneofCase.ReadyMessage;
      }
    }

    /// <summary>Field number for the "configure_message" field.</summary>
    public const int ConfigureMessageFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Messages.Configure ConfigureMessage {
      get { return realMessageCase_ == RealMessageOneofCase.ConfigureMessage ? (global::Tron.Protocol.Messages.Configure) realMessage_ : null; }
      set {
        realMessage_ = value;
        realMessageCase_ = value == null ? RealMessageOneofCase.None : RealMessageOneofCase.ConfigureMessage;
      }
    }

    /// <summary>Field number for the "player_event_message" field.</summary>
    public const int PlayerEventMessageFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tron.Protocol.Messages.PlayerEvent PlayerEventMessage {
      get { return realMessageCase_ == RealMessageOneofCase.PlayerEventMessage ? (global::Tron.Protocol.Messages.PlayerEvent) realMessage_ : null; }
      set {
        realMessage_ = value;
        realMessageCase_ = value == null ? RealMessageOneofCase.None : RealMessageOneofCase.PlayerEventMessage;
      }
    }

    private object realMessage_;
    /// <summary>Enum of possible cases for the "real_message" oneof.</summary>
    public enum RealMessageOneofCase {
      None = 0,
      ChatMessage = 2,
      ReadyMessage = 3,
      ConfigureMessage = 4,
      PlayerEventMessage = 5,
    }
    private RealMessageOneofCase realMessageCase_ = RealMessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealMessageOneofCase RealMessageCase {
      get { return realMessageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRealMessage() {
      realMessageCase_ = RealMessageOneofCase.None;
      realMessage_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatServerWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatServerWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      if (!object.Equals(ChatMessage, other.ChatMessage)) return false;
      if (!object.Equals(ReadyMessage, other.ReadyMessage)) return false;
      if (!object.Equals(ConfigureMessage, other.ConfigureMessage)) return false;
      if (!object.Equals(PlayerEventMessage, other.PlayerEventMessage)) return false;
      if (RealMessageCase != other.RealMessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageType != global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType.WrappermessagetypeChat) hash ^= MessageType.GetHashCode();
      if (realMessageCase_ == RealMessageOneofCase.ChatMessage) hash ^= ChatMessage.GetHashCode();
      if (realMessageCase_ == RealMessageOneofCase.ReadyMessage) hash ^= ReadyMessage.GetHashCode();
      if (realMessageCase_ == RealMessageOneofCase.ConfigureMessage) hash ^= ConfigureMessage.GetHashCode();
      if (realMessageCase_ == RealMessageOneofCase.PlayerEventMessage) hash ^= PlayerEventMessage.GetHashCode();
      hash ^= (int) realMessageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageType != global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType.WrappermessagetypeChat) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (realMessageCase_ == RealMessageOneofCase.ChatMessage) {
        output.WriteRawTag(18);
        output.WriteMessage(ChatMessage);
      }
      if (realMessageCase_ == RealMessageOneofCase.ReadyMessage) {
        output.WriteRawTag(26);
        output.WriteMessage(ReadyMessage);
      }
      if (realMessageCase_ == RealMessageOneofCase.ConfigureMessage) {
        output.WriteRawTag(34);
        output.WriteMessage(ConfigureMessage);
      }
      if (realMessageCase_ == RealMessageOneofCase.PlayerEventMessage) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerEventMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageType != global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType.WrappermessagetypeChat) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (realMessageCase_ == RealMessageOneofCase.ChatMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatMessage);
      }
      if (realMessageCase_ == RealMessageOneofCase.ReadyMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadyMessage);
      }
      if (realMessageCase_ == RealMessageOneofCase.ConfigureMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigureMessage);
      }
      if (realMessageCase_ == RealMessageOneofCase.PlayerEventMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerEventMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatServerWrapper other) {
      if (other == null) {
        return;
      }
      if (other.MessageType != global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType.WrappermessagetypeChat) {
        MessageType = other.MessageType;
      }
      switch (other.RealMessageCase) {
        case RealMessageOneofCase.ChatMessage:
          if (ChatMessage == null) {
            ChatMessage = new global::Tron.Protocol.Messages.Chat();
          }
          ChatMessage.MergeFrom(other.ChatMessage);
          break;
        case RealMessageOneofCase.ReadyMessage:
          if (ReadyMessage == null) {
            ReadyMessage = new global::Tron.Protocol.Messages.Ready();
          }
          ReadyMessage.MergeFrom(other.ReadyMessage);
          break;
        case RealMessageOneofCase.ConfigureMessage:
          if (ConfigureMessage == null) {
            ConfigureMessage = new global::Tron.Protocol.Messages.Configure();
          }
          ConfigureMessage.MergeFrom(other.ConfigureMessage);
          break;
        case RealMessageOneofCase.PlayerEventMessage:
          if (PlayerEventMessage == null) {
            PlayerEventMessage = new global::Tron.Protocol.Messages.PlayerEvent();
          }
          PlayerEventMessage.MergeFrom(other.PlayerEventMessage);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MessageType = (global::Tron.Protocol.Wrappers.Server.ServerWrapperMessageType) input.ReadEnum();
            break;
          }
          case 18: {
            global::Tron.Protocol.Messages.Chat subBuilder = new global::Tron.Protocol.Messages.Chat();
            if (realMessageCase_ == RealMessageOneofCase.ChatMessage) {
              subBuilder.MergeFrom(ChatMessage);
            }
            input.ReadMessage(subBuilder);
            ChatMessage = subBuilder;
            break;
          }
          case 26: {
            global::Tron.Protocol.Messages.Ready subBuilder = new global::Tron.Protocol.Messages.Ready();
            if (realMessageCase_ == RealMessageOneofCase.ReadyMessage) {
              subBuilder.MergeFrom(ReadyMessage);
            }
            input.ReadMessage(subBuilder);
            ReadyMessage = subBuilder;
            break;
          }
          case 34: {
            global::Tron.Protocol.Messages.Configure subBuilder = new global::Tron.Protocol.Messages.Configure();
            if (realMessageCase_ == RealMessageOneofCase.ConfigureMessage) {
              subBuilder.MergeFrom(ConfigureMessage);
            }
            input.ReadMessage(subBuilder);
            ConfigureMessage = subBuilder;
            break;
          }
          case 42: {
            global::Tron.Protocol.Messages.PlayerEvent subBuilder = new global::Tron.Protocol.Messages.PlayerEvent();
            if (realMessageCase_ == RealMessageOneofCase.PlayerEventMessage) {
              subBuilder.MergeFrom(PlayerEventMessage);
            }
            input.ReadMessage(subBuilder);
            PlayerEventMessage = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
